<Project>
	<PropertyGroup>
		<!--
		TargetFramework gibt an, für welche .NET-Version das Projekt gebaut wird.
		Beispiel: net8.0 steht für .NET 8.
		Dadurch wird festgelegt, welche APIs und Funktionen im Projekt verfügbar sind.
		-->
		<!-- Empfehlung: LTS Versionen bevorzugen .net8, .net10 ... 
	         netstandard nur für Bibliotheken die auf älteren .NET Versionen laufen müssen -->
		<TargetFramework>net8.0</TargetFramework>

		<!-- Legt die C#-Sprachversion auf die neueste fest -->
		<!-- Empfehlung: latest -->
		<LangVersion>latest</LangVersion>

		<!-- Aktiviert Nullable Reference Types für bessere Null-Sicherheit -->
		<!-- Empfehlung: immer enable für neue Projekte -->
		<Nullable>enable</Nullable>

		<!-- Behandelt alle Warnungen als Fehler -->
		<!-- Empfehlung: immer true für neue Projekte -->
		<TreatWarningsAsErrors>true</TreatWarningsAsErrors>

		<!-- Aktiviert deterministische Builds für reproduzierbare Ergebnisse
			Wenn diese Eigenschaft auf "true" gesetzt ist, stellt MSBuild sicher, dass Builds reproduzierbar sind. Das bedeutet:
			- Der Build-Output ist bytegenau identisch, wenn Quellcode, Abhängigkeiten und Build-Umgebung unverändert sind.
			- Zeitstempel, GUIDs und andere nicht-deterministische Daten werden ausgeschlossen oder normalisiert.
			- Nützlich zur Überprüfung, dass ein veröffentlichtes Binary dem Quellcode entspricht (z.B. für Sicherheit, Compliance oder Open-Source-Verteilung).
			- Unterstützt Caching in CI/CD-Systemen, da unveränderte Builds nicht neu gebaut oder getestet werden müssen.
			Diese Eigenschaft wird für moderne .NET-Projekte empfohlen, um reproduzierbare Builds zu gewährleisten. -->
		<Deterministic>true</Deterministic>

		<!-- ImplicitUsings
		Vorteile:
			- Weniger Schreibaufwand, da viele Standard-Namespaces automatisch verfügbar sind.
			- Der Code wirkt aufgeräumter und kürzer.
			- Besonders nützlich für kleine Projekte oder Einsteiger.
		Nachteile:
			- Weniger Kontrolle darüber, welche Namespaces eingebunden werden.
			- Kann zu Namenskonflikten führen, wenn mehrere Namespaces gleiche Typnamen enthalten.
			- Für große oder komplexe Projekte kann es die Übersichtlichkeit beeinträchtigen.
		-->
		<!-- Empfehlung: mit Vorsicht geniessen, nur für standard Standard-Namespaces benutzen  -->
		<ImplicitUsings>enable</ImplicitUsings>

	</PropertyGroup>
</Project>
